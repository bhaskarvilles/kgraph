/*
* Copyright (c) TIKI Inc.
* MIT license. See LICENSE file in root directory.
*/

package com.mytiki.kgraph.features.latest.vertex;

import com.arangodb.springframework.repository.ArangoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.util.Set;
import java.util.List;

@Component
public class VertexLookup {
{{#vertices}}
    private final Vertex{{{type_pascal}}}Repository {{{type_camel}}}Repository;
{{/vertices}}

    @Autowired
    public VertexLookup(
{{#vertices}}
        Vertex{{{type_pascal}}}Repository {{{type_camel}}}Repository{{^last}}, {{/last}}
{{/vertices}}
    ){
{{#vertices}}
        this.{{{type_camel}}}Repository = {{{type_camel}}}Repository;
{{/vertices}}
    }

    public Class<? extends VertexDO> getDOClass(String type){
        switch (type){
{{#vertices}}
            case "{{{type_camel}}}":
                return Vertex{{{type_pascal}}}DO.class;
{{/vertices}}
            default:
                return null;
        }
    }

    public VertexRepository<? extends VertexDO> getRepository(String type){
        switch (type){
{{#vertices}}
            case "{{{type_camel}}}":
                return {{{type_camel}}}Repository;
{{/vertices}}
            default:
                return null;
        }
    }

    public String getSchema(){
        return "[{{#vertices}}{\"type\": \"{{type_camel}}\",\"fields\":[{{#fields}}{\"name\":\"{{name_camel}}\",\"dataType\":\"{{type_json}}{{#collection_json}}[{{{.}}}]{{/collection_json}}\"},{{/fields}}]}{{^last}},{{/last}}{{/vertices}}]";
    }
{{=<% %>=}}
    public String[] getVertices(){
    return new String[]{<%#vertices%>"<%type_camel%>"<%^last%>,<%/last%><%/vertices%>};
    }
<%={{ }}=%>
}
