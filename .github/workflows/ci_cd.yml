name: ci-cd

on:
  push:
    tags:
      - '*.*.*'

jobs:

  build_test_push:
    runs-on: ubuntu-latest
    environment: Production
    services:
      arangodb:
        image: arangodb/enterprise:3.9.1
        env:
          ARANGO_ROOT_PASSWORD: 8G7PNNzmEjrOiWna
        ports:
          - 8529:8529

    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.1
        with:
          path: kgraph

      - name: Checkout Common
        uses: actions/checkout@v3
        with:
          repository: tiki/common
          path: common

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: Install CLI
        uses: dopplerhq/cli-action@v1

      - name: Maven Install Common
        run: |
          cd common
          mvn install

      - name: Maven Package Kgraph
        run: |
          cd kgraph
          mvn clean package -pl generate
          doppler run -c tst -- mvn package
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_ST }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            registry.digitalocean.com/tiki/kgraph
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: Registry login
        run: doctl registry login --expiry-seconds 600

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: kgraph/service/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            JAR_FILE=target/*.jar
            DOPPLER_ST=${{ secrets.DOPPLER_ST }}

  deploy_to_infra:
    runs-on: ubuntu-latest
    needs: [build_test_push]

    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.1

      - name: Get Version From Tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Setup Terraform Variables
        working-directory: ./infra
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          sem_ver = "${{ steps.vars.outputs.tag }}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: infra

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infra

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infra